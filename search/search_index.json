{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hermit","text":""},{"location":"#hermit-manages-isolated-self-bootstrapping-sets-of-tools-in-software-projects","title":"Hermit manages isolated, self-bootstrapping sets of tools in software projects.","text":"<p>Hermit ensures that your team, your contributors, and your CI have the same consistent tooling.</p> <p>Packages installed via Hermit will be available on any future machine, Linux or Mac, by simply cloning the repository and running the linked binaries.</p> <p>Each link will bootstrap Hermit if necessary, then auto-install the package, before executing the binary.</p> <p>Get Started</p>"},{"location":"#why-do-i-need-it","title":"Why Do I Need it?","text":"<p>If you\u2019ve ever had to add something like the following to your project\u2019s README\u2026</p> <p>Make sure you have at least Node 12.x.y, protoc x.y.z, GNU make version 4.x.y, and Go 1.16 or higher.</p> <p>\u2026then Hermit is for you.</p>"},{"location":"#example","title":"Example","text":""},{"location":"#quickstart","title":"Quickstart","text":"<p>Run this command and follow the instructions:</p> <pre><code>curl -fsSL https://github.com/cashapp/hermit/releases/download/stable/install.sh | /bin/bash\n</code></pre>"},{"location":"#packages","title":"Packages","text":"<p>Default packages are available here.</p>"},{"location":"#source-code","title":"Source code","text":"<p>Contributions are welcome here.</p>"},{"location":"#problems","title":"Problems?","text":"<p>Please file an issue and we\u2019ll look into it.</p>"},{"location":"about/","title":"About","text":"<p>Hermit was created at CashApp (Square) by Alec Thomas and Juho M\u00e4kinen of the Cash Cloud Platform team, with contributions by many others whose feedback is very much appreciated.</p> <p>The source code for Hermit is here. The default open source set of package manifests is here.</p> <p>For discussions find us on the #cashapp channel on Gophers Slack.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#which-shells-does-hermit-work-with","title":"Which Shells Does Hermit work with?","text":"<p>Hermit currently works with <code>bash</code>, <code>zsh</code>, <code>fish</code> natively.</p> <p>For <code>fish</code> shell, when using hermit in a repo created prior to native fish support, run <code>hermit init</code> again and check in the new <code>activate-hermit.fish</code> script.</p>"},{"location":"faq/#powerlevel10k-support","title":"powerlevel10k support","text":"<p>If you would like powerlevel10k to support hermit, all that is needed is to add the following to your <code>~/.p10k.zsh</code></p> <p><pre><code>function prompt_hermit() {\n  if [[ -n $HERMIT_ENV ]]; then\n    p10k segment -t \"${${HERMIT_ENV:t}//\\%/%%} \ud83d\udc1a\"  -f blue\n  fi\n}\n</code></pre> Then you can add the hermit segment to any location. For example:</p> <pre><code>  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(\n    # =========================[ Line #1 ]=========================\n    os_icon                 # os identifier\n    dir                     # current directory\n    vcs                     # git status\n    # =========================[ Line #2 ]=========================\n    newline                 # \\n\n    hermit\n    prompt_char             # prompt symbol\n  )\n</code></pre>"},{"location":"faq/#does-hermit-manage-libaries","title":"Does Hermit Manage Libaries?","text":"<p>No, Hermit is deliberately not in the business of installing libraries. Hermit is designed to manage development tools only, not be a general purpose package manager. Consider Nix if you need this kind of functionality.</p>"},{"location":"faq/#is-python-supported","title":"Is Python supported?","text":"<p>Yes!</p> <p>Hermit sets <code>PYTHONUSERBASE</code> to <code>${HERMIT_ENV}/.hermit/python</code> and adds <code>${PYTHONUSERBASE}/bin</code> to the <code>${PATH}</code> when in an activated environment. This results in packages installed within the environment being mostly (completely?) isolated similar to how virtualenv works.</p>"},{"location":"faq/#why-doesnt-hermit-have-a-package-for","title":"Why Doesn\u2019t Hermit Have a Package for \u2026?","text":"<p>There could be a number of reasons why a package isn\u2019t present in Hermit. </p> <ul> <li>The package may not be conducive to self-contained packaging (eg. Python).</li> <li>The community might not have needed one (yet) - please contribute one!</li> </ul>"},{"location":"faq/#does-the-hermit-project-build-and-host-its-own-packages","title":"Does the Hermit Project Build and Host its own Packages?","text":"<p>Yes and no. Mostly no, but some existing upstream binary packages require some level of pre-processing (eg. Python). These are hosted at cashapp/hermit-build.</p>"},{"location":"faq/#how-is-hermit-different-to","title":"How is Hermit different to \u2026?","text":""},{"location":"faq/#asdf","title":"asdf","text":"<p>Hermit is probably most similar to asdf, but their goals differ. Hermit\u2019s goal is to make isolated cross-platform tooling consistent, self-bootstrapping, and reproducible at the project level. asdf\u2019s primary goal is to allow developers to install and switch between multiple versions of languages and tooling.</p> Hermit asdf Compare Packaging HCL manifest Shell script-based plugin API Java in asdf / Java in Hermit. Packages Binary only. Compile from source, binary, wrappers around pyenv, rbenv, etc. Python in asdf / Python in Hermit <p>Limiting Hermit to installing only binary packages has pros and cons:</p> Feature Explanation Pro Faster Binary packages don\u2019t require compilation, just downloading and unpacking. Con Less choice There are typically less relocatable/static binary packages available. Con Relocatable packages Relocatable/static binary packages can be difficult to build. Pro Less fragile Source installations fail frequently due to missing dependencies, missing tools, and so on. Pro Less requirements Source installations generally require a functional compiler toolchain be already present on your system, such as GCC, clang, etc."},{"location":"faq/#bazel","title":"Bazel","text":"<p>While not really in the same space as Hermit, Bazel does provide build isolation and opt-in hermetic builds. However Bazel also:</p> <ul> <li>Requires going all-in on Bazel as a build system, whereas Hermit is   explicitly not a build system but rather integrates into existing   toolchains.</li> <li>Requires completely separate tooling, editor/IDE integration and so on.</li> </ul>"},{"location":"faq/#docker","title":"Docker","text":"<p>Docker has a very large community and provides isolation, both of which are appealing. Unfortunately it has several shortcomings which in our view preclude it from use as a day to day development tooling system.</p> <ul> <li>Filesystem mapping on OSX is very slow.</li> <li>It does not support OSX binaries inside Docker (though see Docker-OSX).</li> <li>Poor integration with host editors/IDEs (though there is some movement).</li> </ul>"},{"location":"faq/#gofish","title":"GoFish","text":"<p>GoFish\u2019s package definitions are quite similar to Hermit\u2019s, but GoFish itself:</p> <ul> <li>Does not support multiple versions of the same package.</li> <li>Requires root for system wide installation.</li> <li>Does not support the concept of \u201cenvironments\u201d.</li> </ul>"},{"location":"faq/#homebrew","title":"Homebrew","text":"<p>Homebrew is a full package build system but also:</p> <ul> <li>Is a system wide package manager.</li> <li>Is largely OSX specific.</li> <li>Does not support concurrent installation of different versions of the same package well.</li> </ul>"},{"location":"faq/#nix","title":"Nix","text":"<p>Nix is the package manager for an entire OS and thus provides vastly more functionality than Hermit, including a full package build system. This naturally also comes with a corresponding increase in complexity. Hermit is deliberately designed to be narrow in scope, limited to just installing existing packages.</p>"},{"location":"packaging/","title":"Packaging","text":"<p>Hermit manifests (package definitions) are HCL  configuration files defining where to download packages from and how to install them.</p>"},{"location":"packaging/private/","title":"Private Packages","text":""},{"location":"packaging/private/#custom-hermit","title":"Custom Hermit","text":"<p>Hermit has a configurable command-line entry point which can be useful if you need to use a custom HTTP client in order to access your private packages or manifest sources. See the hermit main package for an example of how this is used.</p> <p>This can be used to specify a custom set of sources, and other configuration, for your org.</p>"},{"location":"packaging/private/#private-channel","title":"Private Channel","text":"<p>If you ship your own version of Hermit you must choose a unique channel name (typically your organization\u2019s name), eg. For Square this would be <code>square</code>. If you don\u2019t choose a unique channel your users may end up using the public Hermit accidentally, creating confusion.</p>"},{"location":"packaging/private/#installer-script","title":"Installer Script","text":"<p>Note</p> <p>The Hermit installer requires the parent path component of its install URL to be the same as the channel name.</p> <p>A custom <code>install.sh</code> can be generated by <code>cmd/geninstaller</code>:</p> <pre><code>geninstaller --dest=install.sh --dist-url=https://mycompany.com/mycompany/hermit-install.sh\n</code></pre>"},{"location":"packaging/private/#private-github-releases","title":"Private GitHub Releases","text":"<p>Private GitHub Releases can be accessed with a Personal Access Token, an OAuth token or a GitHub App installation token. This token must have the <code>repo</code> scope set at creation.</p> <p>The environment variable <code>HERMIT_GITHUB_TOKEN</code> must be set to this a token.</p> <p>You can configure a Hermit-initialized repository to use this token by adding a <code>github-token-auth</code> block to your <code>bin/hermit.hcl</code>. For example:</p> <pre><code># Use HERMIT_GITHUB_TOKEN to authenticate downloads from GitHub repositories\n# owned by the 'cashapp' organization.\ngithub-token-auth {\n  match = [\"cashapp/*\"]\n}\n</code></pre>"},{"location":"packaging/reference/","title":"Reference","text":""},{"location":"packaging/reference/#update-policy","title":"Update Policy","text":"<p>Hermit syncs manifest sources every 24 hours from HEAD. Because any changes are then immediately reflected in active environments, care must be taken to maintain backwards compatibility.</p> <p>In particular this means:</p> <ul> <li>Never delete or rename versions.</li> <li>Take care when updating environment variables.</li> </ul> <p>And in general think carefully about what impact your change will have if it is applied to an active environment.</p>"},{"location":"packaging/reference/#manifests","title":"Manifests","text":"<p>Hermit manifests (package definitions) are HCL  configuration files defining where to download packages from and how to install them.</p> <p>Refer to the schema documentation for details.</p> <p>Here\u2019s an example manifest for Rust:</p> <pre><code>description = \"A language empowering everyone to build reliable and efficient software.\"\nbinaries = [\"bin/*\"]\nstrip = 2\n\ndarwin {\n  source = \"https://static.rust-lang.org/dist/rust-${version}-x86_64-apple-darwin.tar.xz\"\n}\n\nlinux {\n  source = \"https://static.rust-lang.org/dist/rust-${version}-x86_64-unknown-linux-musl.tar.xz\"\n}\n\nversion \"1.51.0\" {}\n\nchannel nightly {\n  update = \"24h\"\n  darwin {\n    source = \"https://static.rust-lang.org/dist/rust-nightly-x86_64-apple-darwin.tar.xz\"\n  }\n\n  linux {\n    source = \"https://static.rust-lang.org/dist/rust-nightly-x86_64-unknown-linux-musl.tar.xz\"\n  }\n}\n</code></pre> <p>Package source can refer to a remote archive file by using <code>http://</code> or <code>https://</code> prefixes, to a local file by using <code>file://</code> prefix, or to a Git repository by using <code>.git</code> suffix.  If the source points to an archive file, it is extracted at installation. Git repositories are cloned from the default branch and used as is.</p>"},{"location":"packaging/reference/#sources","title":"Sources","text":"<p>A manifest source is a location where a set of manifests are stored. Hermit supports manifest sources in Git repositories, local filesystems (useful for temporary overrides while testing packages), and environment-relative.</p> <p>Multiple sources can be specified globally by Hermit or per-project, allowing fine-grained control over which package definitions will be used.</p>"},{"location":"packaging/reference/#versions","title":"Versions","text":"<p>Version blocks are explicitly defined versions of a particular package.</p>"},{"location":"packaging/reference/#channels","title":"Channels","text":"<p>Channels define a download source that will be automatically checked for updates periodically. Hermit will check the URL\u2019s ETag and update the package if there is a newer version.</p> <p>Additionally, Hermit will create several synthetic channels which are checked for updates every 24h:</p> <ol> <li>A <code>@latest</code> channel pointing at the most recent non-pre-release version.</li> <li>A <code>@&lt;MAJOR&gt;</code> channel for every major version.</li> <li>A <code>@&lt;MAJOR&gt;.&lt;MINOR&gt;</code> channel for every major+minor version.</li> </ol> <p>This allows projects to pin to stable releases.</p>"},{"location":"packaging/reference/#dependencies","title":"Dependencies","text":"<p>Hermit supports two kinds of dependencies between packages, direct dependencies and runtime dependencies.</p>"},{"location":"packaging/reference/#direct-dependencies","title":"Direct dependencies","text":"<p>Direct dependencies are declared in the manifest files using a <code>requires</code> definition in the manifest file.  This lists the packages that are needed in the environment to use the given package.  The package references in the <code>requires</code> list can either refer to an explicit package, or to a value defined in the <code>provides</code> definition of the dependency. For example, <code>requires = [\"jre\"]</code> would work with any package defining <code>provides = [\"jre\"]</code> in its definition.</p> <p>When a package with <code>requires</code> definition is installed, all its dependencies are installed to the target environment as well.</p>"},{"location":"packaging/reference/#runtime-dependencies","title":"Runtime dependencies","text":"<p>Runtime dependencies are package dependencies that are not installed into the target environment. These are defined using a <code>runtime-dependencies</code> definition in the manifest.</p> <p>Hermit makes sure the runtime dependencies are on the system when a binary from the package is executed, and injects the environment variables from the runtime dependencies to the binary when executed. This is a good way on depending on binaries and env variables from other packages in your package without exposing them to the target environment.</p>"},{"location":"packaging/reference/#variable-interpolation","title":"Variable Interpolation","text":"<p>Hermit manifests support basic variable interpolation to simplify configuration. It\u2019s not necessary to utilise them, but they can make life simpler in many cases.</p> <p>The available variables are:</p> Variable Description <code>name</code> The name of the current package. <code>version</code> The version selected by the user. Does not apply when installing a channel. <code>dest</code> The directory where the archive will be extracted. Defaults to <code>&lt;hermit-state&gt;/pkg/&lt;pkg-selector&gt;</code>. <code>root</code> Directory considered the package root. Defaults to <code>${dest}</code>. <code>os</code> The system\u2019s OS as reported by Go. <code>arch</code> The system\u2019s CPU architecture as reported by Go. <code>xarch</code> An alternate mapping of <code>${arch}</code> where <code>amd64</code>=&gt;<code>x86_64</code>,  <code>i386</code>=&gt;<code>386</code>, and <code>arm64</code>=&gt;<code>aarch64</code>. <code>HERMIT_ENV</code> Path to the active Hermit environment. <code>HERMIT_BIN</code> Path to the active Hermit environment\u2019s <code>bin</code> directory. <code>HOME</code> The user\u2019s home directory."},{"location":"packaging/reference/#triggers-and-actions","title":"Triggers and Actions","text":"<p>Hermit supports the concept of triggers and actions which can be applied when certain events occur in the package lifecycle. Supported events are:</p> Event Description <code>unpack</code> Triggered when a package is unpacked into the Hermit cache. <code>install</code> Triggered when a package is installed into an environment. <code>uninstall</code> Triggered when a package is uninstalled from an environment. <code>activate</code> Triggered when the environment the package is installed in is activated. <code>exec</code> Triggered whenever a binary in the package is executed. NOTE: This trigger will run for every execution and can negatively impact performance. <p>More triggers may be added in the future.</p>"},{"location":"packaging/tutorial/","title":"Tutorial","text":"<p>For this tutorial we\u2019re going to package up jq,  a supremely useful tool for filtering and transforming JSON.</p> <p>Writing package manifests for Hermit should be fairly familiar to anyone who has had experience with package managers like Homebrew, though it should be significantly more straightforward assuming the package provides cross-platform binaries for download.</p> <p>This tutorial covers a fairly simple package definition, but more complex examples exist such as graalvm. Please refer to the hermit-packages repository for many more examples.</p>"},{"location":"packaging/tutorial/#clone-and-activate-the-manifest-repository","title":"Clone and Activate the Manifest Repository","text":"<pre><code>git clone https://github.com/cashapp/hermit-packages\ncd hermit-packages\n. ./bin/activate-hermit\n</code></pre> <p>Hint</p> <p>The Hermit manifest repository is itself a Hermit environment configured to use itself as the source of packages. This makes testing very convenient.</p>"},{"location":"packaging/tutorial/#find-the-releases","title":"Find the Releases","text":"<p>The releases for jq are conveniently in a single page and by downloading one of the links we can see that they\u2019re directly downloadable binaries. Convenient.</p>"},{"location":"packaging/tutorial/#create-a-basic-manifest","title":"Create a Basic Manifest","text":"<p>Create an empty <code>jq.hcl</code> file in the <code>hermit-packages</code> directory. The first thing you\u2019ll want is a description, for which typically just copy the project description from their site or GitHub repository:</p> <pre><code>description = \"jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.\"\n</code></pre> <p>Hint</p> <p>The <code>hermit</code> CLI includes a best-effort command to create a stub manifest.</p> <pre><code>hermit manifest create https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64`\n</code></pre> <p>Currently there a few limitations:</p> <ol> <li>It only works for binaries in GitHub releases.</li> <li>The download link must include <code>${os}</code> and either <code>${arch}</code> or <code>${xarch}</code>.</li> </ol> <p>Hopefully these limitations will be removed over time.</p>"},{"location":"packaging/tutorial/#add-a-version","title":"Add a Version","text":"<p><code>version</code> blocks tell Hermit what versions of a package are available for download and are specified as blocks. We\u2019ll start with an empty one for <code>jq-1.6</code>:</p> <pre><code>version \"1.6\" {}\n</code></pre>"},{"location":"packaging/tutorial/#add-download-urls-for-each-os","title":"Add Download URLs for Each OS","text":"<p>Looking at the links we can see that there are downloads for Linux and OSX:</p> <ol> <li>https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64</li> <li>https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64</li> </ol> <p>So we\u2019ll add blocks for the respective operating systems (<code>linux</code> and <code>darwin</code>) and populate the <code>source</code> attribute, which tells Hermit where to download packages from:</p> <pre><code>version \"1.6\" {\n  linux {\n    source = \"https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64\"\n  }\n\n  darwin {\n    source = \"https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64\"\n  }\n}\n</code></pre>"},{"location":"packaging/tutorial/#dry-our-urls","title":"DRY our URLs","text":"<p>The raw URLs will work fine, but if we add more versions later it would be nice not to have to duplicate this configuration. To do that we can pull the OS blocks out to the top level and use Hermit\u2019s variable interpolation support to substitute the <code>${version}</code> variable:</p> <pre><code>description = \"jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.\"\nlinux {\n  source = \"https://github.com/stedolan/jq/releases/download/jq-${version}/jq-linux64\"\n}\n\ndarwin {\n  source = \"https://github.com/stedolan/jq/releases/download/jq-${version}/jq-osx-amd64\"\n}\n\nversion \"1.6\" {}\n</code></pre> <p>When selecting a version/channel, Hermit will look for sources in the matching block and fallback to the top-level.</p>"},{"location":"packaging/tutorial/#specifying-the-binaries","title":"Specifying the Binaries","text":"<p>At this point Hermit knows where to download our binaries from, but not what to do with them. The binaries will also have different names(<code>jq-linux64</code> and <code>jq-osx-amd64</code>) depending on which OS we\u2019re on. We need to rename this binaries to the canonical <code>jq</code>. To solve this we\u2019re going to need to use a trigger to apply an action when unpacking, specifically the  rename action.</p> <pre><code>linux {\n  source = \"https://github.com/stedolan/jq/releases/download/jq-${version}/jq-linux64\"\n  on unpack {\n    rename { from = \"${root}/jq-linux64\" to = \"${root}/jq\" }\n  }\n}\n\ndarwin {\n  source = \"https://github.com/stedolan/jq/releases/download/jq-${version}/jq-osx-amd64\"\n  on unpack {\n    rename { from = \"${root}/jq-osx-amd64\" to = \"${root}/jq\" }\n  }\n}\n</code></pre> <p>And tell Hermit which binaries to link when installed:</p> <pre><code>binaries = [\"jq\"]\n</code></pre> <p>{{&lt; hint ok &gt;}} The <code>binaries</code> attribute supports globs, which will be expanded at unpack time. {{&lt; /hint &gt;}}</p>"},{"location":"packaging/tutorial/#adding-sha256-sums","title":"Adding SHA256 Sums","text":"<p>Populating sha256 checksums for each of your package downloads allows Hermit to validate the integrity after downloading. (provided in the <code>sha256sums</code> field)</p> <p>You can use Hermit to automatically generate them for you:</p> <pre><code>hermit add-digests jq.hcl\n</code></pre>"},{"location":"packaging/tutorial/#testing-the-package","title":"Testing the Package","text":"<p>Hermit packages can include a <code>testing</code> attribute which is a command to run to test whether the package is functioning. This will typically just be something like:</p> <pre><code>test = \"jq --version\"\n</code></pre> <p>The Hermit packages CI will run these tests periodically.</p> <p>To test your package run:</p> <pre><code>$ hermit test jq --trace\ndebug:jq-1.6:exec: /Users/user/Library/Caches/hermit/pkg/jq-1.6/jq --version\ndebug: jq-1.6\n</code></pre>"},{"location":"packaging/tutorial/#the-end-result","title":"The End Result","text":"<p>And we\u2019re done.</p> <pre><code>description = \"jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.\"\nbinaries = [\"jq\"]\ntest = \"jq --version\"\n\nlinux {\n  source = \"https://github.com/stedolan/jq/releases/download/jq-${version}/jq-linux64\"\n  on unpack {\n    rename { from = \"${root}/jq-linux64\" to = \"${root}/jq\" }\n  }\n}\n\ndarwin {\n  source = \"https://github.com/stedolan/jq/releases/download/jq-${version}/jq-osx-amd64\"\n  on unpack {\n    rename { from = \"${root}/jq-osx-amd64\" to = \"${root}/jq\" }\n  }\n}\n\nversion \"1.6\" {}\n</code></pre>"},{"location":"packaging/tutorial/#local-manual-testing","title":"Local Manual Testing","text":"<p>As mentioned above, <code>hermit-packages</code> is also a Hermit environment. Now we have our manifest we can attempt to install it with:</p> <pre><code>$ hermit install jq\n$ jq --version\njq-1.6\n</code></pre>"},{"location":"packaging/tutorial/#distribute-the-package","title":"Distribute the Package","text":"<p>At this point you can (and should!) contribute the package back to the community via a PR.</p>"},{"location":"packaging/schema/","title":"Schema","text":"<p>Each Hermit package manifest is a nested structure containing OS/architecture-specific configuration.</p> <p>This is reference documentation for the manifest structure. Refer to the tutorial for a guided introduction and existing manifests for examples.</p>"},{"location":"packaging/schema/auto-version/","title":"version &gt; auto-version","text":"<p>Automatically update versions.</p> <p>Used by: version</p>"},{"location":"packaging/schema/auto-version/#blocks","title":"Blocks","text":"Block Description <code>html { \u2026 }</code> Extract version information from a HTML URL using XPath."},{"location":"packaging/schema/auto-version/#attributes","title":"Attributes","text":"Attribute Type Description <code>git-tags</code> <code>string?</code> Git remote URL to fetch git tags for version extraction. <code>github-release</code> <code>string?</code> GitHub &lt;user&gt;/&lt;repo&gt; to retrieve and update versions from the releases API. <code>ignore-invalid-versions</code> <code>boolean?</code> Ignore tags that don't match the versin-pattern instead of failing. Does not apply to versions extracted using HTML URL <code>version-pattern</code> <code>string?</code> Regex with one capture group to extract the version number from the origin. default: v?(.*)"},{"location":"packaging/schema/channel/","title":"channel &lt;name&gt;","text":"<p>Definition of and configuration for an auto-update channel.</p> <p>Used by: &lt;manifest&gt;</p>"},{"location":"packaging/schema/channel/#blocks","title":"Blocks","text":"Block Description <code>darwin { \u2026 }</code> Darwin-specific configuration. <code>linux { \u2026 }</code> Linux-specific configuration. <code>on &lt;event&gt; { \u2026 }</code> Triggers to run on lifecycle events. <code>platform &lt;attr&gt; { \u2026 }</code> Platform-specific configuration. &lt;attr&gt; is a set regexes that must all match against one of CPU, OS, etc.."},{"location":"packaging/schema/channel/#attributes","title":"Attributes","text":"Attribute Type Description <code>apps</code> <code>[string]?</code> Relative paths to Mac .app packages to install. <code>arch</code> <code>string?</code> CPU architecture to match (amd64, 386, arm, etc.). <code>binaries</code> <code>[string]?</code> Relative glob from $root to individual terminal binaries. <code>dest</code> <code>string?</code> Override archive extraction destination for package. <code>dont-extract</code> <code>boolean?</code> Don't extract the package source, just copy it into the installation directory. <code>env</code> <code>{string: string}?</code> Environment variables to export. <code>files</code> <code>{string: string}?</code> Files to load strings from to be used in the manifest. <code>mirrors</code> <code>[string]?</code> Mirrors to use if the primary source is unavailable. <code>mutable</code> <code>boolean?</code> Package will not be made read-only. <code>provides</code> <code>[string]?</code> This package provides the given virtual packages. <code>rename</code> <code>{string: string}?</code> Rename files after unpacking to ${root}. <code>requires</code> <code>[string]?</code> Packages this one requires. <code>root</code> <code>string?</code> Override root for package. <code>runtime-dependencies</code> <code>[string]?</code> Packages used internally by this package, but not installed to the target environment <code>sha256</code> <code>string?</code> SHA256 of source package for verification. When in conflict with SHA256 in sha256sums, this value takes precedence. <code>sha256-source</code> <code>string?</code> URL for SHA256 checksum file for source package. <code>source</code> <code>string?</code> URL for source package. Valid URLs are Git repositories (using .git[#&lt;tag&gt;] suffix), Local Files (using file:// prefix), and Remote Files (using http:// or https:// prefix) <code>strip</code> <code>number?</code> Number of path prefix elements to strip. <code>test</code> <code>string?</code> Command that will test the package is operational. <code>update</code> <code>string</code> Update frequency for this channel. <code>vars</code> <code>{string: string}?</code> Set local variables used during manifest evaluation. <code>version</code> <code>string?</code> Use the latest version matching this version glob as the source of this channel. Empty string matches all versions"},{"location":"packaging/schema/chmod/","title":"on &gt; chmod","text":"<p>Change a files mode.</p> <p>Used by: on</p>"},{"location":"packaging/schema/chmod/#attributes","title":"Attributes","text":"Attribute Type Description <code>file</code> <code>string</code> File to set mode on. <code>mode</code> <code>number</code> File mode to set."},{"location":"packaging/schema/copy/","title":"on &gt; copy","text":"<p>A file to copy when the event is triggered.</p> <p>Used by: on</p>"},{"location":"packaging/schema/copy/#attributes","title":"Attributes","text":"Attribute Type Description <code>from</code> <code>string</code> The source file to copy from. Absolute paths reference the file system while relative paths are against the manifest source bundle. <code>mode</code> <code>number?</code> File mode of file. <code>to</code> <code>string</code> The relative destination to copy to, based on the context."},{"location":"packaging/schema/darwin/","title":"darwin","text":"<p>Darwin-specific configuration.</p> <p>Used by: channel linux &lt;manifest&gt; platform version</p>"},{"location":"packaging/schema/darwin/#blocks","title":"Blocks","text":"Block Description <code>darwin { \u2026 }</code> Darwin-specific configuration. <code>linux { \u2026 }</code> Linux-specific configuration. <code>on &lt;event&gt; { \u2026 }</code> Triggers to run on lifecycle events. <code>platform { \u2026 }</code> Platform-specific configuration. &lt;attr&gt; is a set regexes that must all match against one of CPU, OS, etc.."},{"location":"packaging/schema/darwin/#attributes","title":"Attributes","text":"Attribute Type Description <code>apps</code> <code>[string]?</code> Relative paths to Mac .app packages to install. <code>arch</code> <code>string?</code> CPU architecture to match (amd64, 386, arm, etc.). <code>binaries</code> <code>[string]?</code> Relative glob from $root to individual terminal binaries. <code>dest</code> <code>string?</code> Override archive extraction destination for package. <code>dont-extract</code> <code>boolean?</code> Don't extract the package source, just copy it into the installation directory. <code>env</code> <code>{string: string}?</code> Environment variables to export. <code>files</code> <code>{string: string}?</code> Files to load strings from to be used in the manifest. <code>mirrors</code> <code>[string]?</code> Mirrors to use if the primary source is unavailable. <code>mutable</code> <code>boolean?</code> Package will not be made read-only. <code>provides</code> <code>[string]?</code> This package provides the given virtual packages. <code>rename</code> <code>{string: string}?</code> Rename files after unpacking to ${root}. <code>requires</code> <code>[string]?</code> Packages this one requires. <code>root</code> <code>string?</code> Override root for package. <code>runtime-dependencies</code> <code>[string]?</code> Packages used internally by this package, but not installed to the target environment <code>sha256</code> <code>string?</code> SHA256 of source package for verification. When in conflict with SHA256 in sha256sums, this value takes precedence. <code>sha256-source</code> <code>string?</code> URL for SHA256 checksum file for source package. <code>source</code> <code>string?</code> URL for source package. Valid URLs are Git repositories (using .git[#&lt;tag&gt;] suffix), Local Files (using file:// prefix), and Remote Files (using http:// or https:// prefix) <code>strip</code> <code>number?</code> Number of path prefix elements to strip. <code>test</code> <code>string?</code> Command that will test the package is operational. <code>vars</code> <code>{string: string}?</code> Set local variables used during manifest evaluation."},{"location":"packaging/schema/delete/","title":"on &gt; delete","text":"<p>Delete files.</p> <p>Used by: on</p>"},{"location":"packaging/schema/delete/#attributes","title":"Attributes","text":"Attribute Type Description <code>files</code> <code>[string]</code> Files to delete. <code>recursive</code> <code>boolean?</code> Recursively delete."},{"location":"packaging/schema/html/","title":"auto-version &gt; html","text":"<p>Extract version information from a HTML URL using XPath.</p> <p>Used by: auto-version</p>"},{"location":"packaging/schema/html/#attributes","title":"Attributes","text":"Attribute Type Description <code>css</code> <code>string?</code> CSS selector for selecting versions from HTML (see andybalholm/cascadia). Only one of xpath or css can be specified. <code>url</code> <code>string</code> URL to retrieve HTML from. <code>xpath</code> <code>string?</code> XPath for selecting versions from HTML (see antchfx/htmlquery) - use version-pattern to extract substrings"},{"location":"packaging/schema/linux/","title":"linux","text":"<p>Linux-specific configuration.</p> <p>Used by: channel darwin &lt;manifest&gt; platform version</p>"},{"location":"packaging/schema/linux/#blocks","title":"Blocks","text":"Block Description <code>darwin { \u2026 }</code> Darwin-specific configuration. <code>linux { \u2026 }</code> Linux-specific configuration. <code>on &lt;event&gt; { \u2026 }</code> Triggers to run on lifecycle events. <code>platform { \u2026 }</code> Platform-specific configuration. &lt;attr&gt; is a set regexes that must all match against one of CPU, OS, etc.."},{"location":"packaging/schema/linux/#attributes","title":"Attributes","text":"Attribute Type Description <code>apps</code> <code>[string]?</code> Relative paths to Mac .app packages to install. <code>arch</code> <code>string?</code> CPU architecture to match (amd64, 386, arm, etc.). <code>binaries</code> <code>[string]?</code> Relative glob from $root to individual terminal binaries. <code>dest</code> <code>string?</code> Override archive extraction destination for package. <code>dont-extract</code> <code>boolean?</code> Don't extract the package source, just copy it into the installation directory. <code>env</code> <code>{string: string}?</code> Environment variables to export. <code>files</code> <code>{string: string}?</code> Files to load strings from to be used in the manifest. <code>mirrors</code> <code>[string]?</code> Mirrors to use if the primary source is unavailable. <code>mutable</code> <code>boolean?</code> Package will not be made read-only. <code>provides</code> <code>[string]?</code> This package provides the given virtual packages. <code>rename</code> <code>{string: string}?</code> Rename files after unpacking to ${root}. <code>requires</code> <code>[string]?</code> Packages this one requires. <code>root</code> <code>string?</code> Override root for package. <code>runtime-dependencies</code> <code>[string]?</code> Packages used internally by this package, but not installed to the target environment <code>sha256</code> <code>string?</code> SHA256 of source package for verification. When in conflict with SHA256 in sha256sums, this value takes precedence. <code>sha256-source</code> <code>string?</code> URL for SHA256 checksum file for source package. <code>source</code> <code>string?</code> URL for source package. Valid URLs are Git repositories (using .git[#&lt;tag&gt;] suffix), Local Files (using file:// prefix), and Remote Files (using http:// or https:// prefix) <code>strip</code> <code>number?</code> Number of path prefix elements to strip. <code>test</code> <code>string?</code> Command that will test the package is operational. <code>vars</code> <code>{string: string}?</code> Set local variables used during manifest evaluation."},{"location":"packaging/schema/manifest/","title":"&lt;manifest>.hcl","text":"<p>Each Hermit package manifest is a nested structure containing OS/architecture-specific configuration.</p>"},{"location":"packaging/schema/manifest/#blocks","title":"Blocks","text":"Block Description <code>channel &lt;name&gt; { \u2026 }</code> Definition of and configuration for an auto-update channel. <code>darwin { \u2026 }</code> Darwin-specific configuration. <code>linux { \u2026 }</code> Linux-specific configuration. <code>on &lt;event&gt; { \u2026 }</code> Triggers to run on lifecycle events. <code>platform &lt;attr&gt; { \u2026 }</code> Platform-specific configuration. &lt;attr&gt; is a set regexes that must all match against one of CPU, OS, etc.. <code>version &lt;version&gt; { \u2026 }</code> Definition of and configuration for a specific version."},{"location":"packaging/schema/manifest/#attributes","title":"Attributes","text":"Attribute Type Description <code>apps</code> <code>[string]?</code> Relative paths to Mac .app packages to install. <code>arch</code> <code>string?</code> CPU architecture to match (amd64, 386, arm, etc.). <code>binaries</code> <code>[string]?</code> Relative glob from $root to individual terminal binaries. <code>default</code> <code>string?</code> Default version or channel if not specified. <code>description</code> <code>string</code> Human readable description of the package. <code>dest</code> <code>string?</code> Override archive extraction destination for package. <code>dont-extract</code> <code>boolean?</code> Don't extract the package source, just copy it into the installation directory. <code>env</code> <code>{string: string}?</code> Environment variables to export. <code>files</code> <code>{string: string}?</code> Files to load strings from to be used in the manifest. <code>homepage</code> <code>string?</code> Home page. <code>mirrors</code> <code>[string]?</code> Mirrors to use if the primary source is unavailable. <code>mutable</code> <code>boolean?</code> Package will not be made read-only. <code>provides</code> <code>[string]?</code> This package provides the given virtual packages. <code>rename</code> <code>{string: string}?</code> Rename files after unpacking to ${root}. <code>repository</code> <code>string?</code> Source Repository. <code>requires</code> <code>[string]?</code> Packages this one requires. <code>root</code> <code>string?</code> Override root for package. <code>runtime-dependencies</code> <code>[string]?</code> Packages used internally by this package, but not installed to the target environment <code>sha256</code> <code>string?</code> SHA256 of source package for verification. When in conflict with SHA256 in sha256sums, this value takes precedence. <code>sha256-source</code> <code>string?</code> URL for SHA256 checksum file for source package. <code>sha256sums</code> <code>{string: string}?</code> SHA256 checksums of source packages for verification. <code>source</code> <code>string?</code> URL for source package. Valid URLs are Git repositories (using .git[#&lt;tag&gt;] suffix), Local Files (using file:// prefix), and Remote Files (using http:// or https:// prefix) <code>strip</code> <code>number?</code> Number of path prefix elements to strip. <code>test</code> <code>string?</code> Command that will test the package is operational. <code>vars</code> <code>{string: string}?</code> Set local variables used during manifest evaluation."},{"location":"packaging/schema/message/","title":"on &gt; message","text":"<p>Display a message to the user.</p> <p>Used by: on</p>"},{"location":"packaging/schema/message/#attributes","title":"Attributes","text":"Attribute Type Description <code>text</code> <code>string</code> Message text to display to user."},{"location":"packaging/schema/mkdir/","title":"on &gt; mkdir","text":"<p>Create a directory and any missing parents.</p> <p>Used by: on</p>"},{"location":"packaging/schema/mkdir/#attributes","title":"Attributes","text":"Attribute Type Description <code>dir</code> <code>string</code> The absolute directory to create. <code>mode</code> <code>number?</code> File mode of directory."},{"location":"packaging/schema/on/","title":"on &lt;event&gt;","text":"<p>Triggers to run on lifecycle events.</p> <p>Used by: channel darwin linux &lt;manifest&gt; platform version</p>"},{"location":"packaging/schema/on/#blocks","title":"Blocks","text":"Block Description <code>chmod { \u2026 }</code> Change a files mode. <code>copy { \u2026 }</code> A file to copy when the event is triggered. <code>delete { \u2026 }</code> Delete files. <code>message { \u2026 }</code> Display a message to the user. <code>mkdir { \u2026 }</code> Create a directory and any missing parents. <code>rename { \u2026 }</code> Rename a file. <code>run { \u2026 }</code> A command to run when the event is triggered. <code>symlink { \u2026 }</code> Create a symbolic link."},{"location":"packaging/schema/platform/","title":"platform &lt;attr&gt;","text":"<p>Platform-specific configuration. &lt;attr&gt; is a set regexes that must all match against one of CPU, OS, etc..</p> <p>Used by: channel darwin linux &lt;manifest&gt; version</p>"},{"location":"packaging/schema/platform/#blocks","title":"Blocks","text":"Block Description <code>darwin { \u2026 }</code> Darwin-specific configuration. <code>linux { \u2026 }</code> Linux-specific configuration. <code>on &lt;event&gt; { \u2026 }</code> Triggers to run on lifecycle events. <code>platform { \u2026 }</code> Platform-specific configuration. &lt;attr&gt; is a set regexes that must all match against one of CPU, OS, etc.."},{"location":"packaging/schema/platform/#attributes","title":"Attributes","text":"Attribute Type Description <code>apps</code> <code>[string]?</code> Relative paths to Mac .app packages to install. <code>arch</code> <code>string?</code> CPU architecture to match (amd64, 386, arm, etc.). <code>binaries</code> <code>[string]?</code> Relative glob from $root to individual terminal binaries. <code>dest</code> <code>string?</code> Override archive extraction destination for package. <code>dont-extract</code> <code>boolean?</code> Don't extract the package source, just copy it into the installation directory. <code>env</code> <code>{string: string}?</code> Environment variables to export. <code>files</code> <code>{string: string}?</code> Files to load strings from to be used in the manifest. <code>mirrors</code> <code>[string]?</code> Mirrors to use if the primary source is unavailable. <code>mutable</code> <code>boolean?</code> Package will not be made read-only. <code>provides</code> <code>[string]?</code> This package provides the given virtual packages. <code>rename</code> <code>{string: string}?</code> Rename files after unpacking to ${root}. <code>requires</code> <code>[string]?</code> Packages this one requires. <code>root</code> <code>string?</code> Override root for package. <code>runtime-dependencies</code> <code>[string]?</code> Packages used internally by this package, but not installed to the target environment <code>sha256</code> <code>string?</code> SHA256 of source package for verification. When in conflict with SHA256 in sha256sums, this value takes precedence. <code>sha256-source</code> <code>string?</code> URL for SHA256 checksum file for source package. <code>source</code> <code>string?</code> URL for source package. Valid URLs are Git repositories (using .git[#&lt;tag&gt;] suffix), Local Files (using file:// prefix), and Remote Files (using http:// or https:// prefix) <code>strip</code> <code>number?</code> Number of path prefix elements to strip. <code>test</code> <code>string?</code> Command that will test the package is operational. <code>vars</code> <code>{string: string}?</code> Set local variables used during manifest evaluation."},{"location":"packaging/schema/rename/","title":"on &gt; rename","text":"<p>Rename a file.</p> <p>Used by: on</p>"},{"location":"packaging/schema/rename/#attributes","title":"Attributes","text":"Attribute Type Description <code>from</code> <code>string</code> Source path to rename. <code>to</code> <code>string</code> Destination path to rename to."},{"location":"packaging/schema/run/","title":"on &gt; run","text":"<p>A command to run when the event is triggered.</p> <p>Used by: on</p>"},{"location":"packaging/schema/run/#attributes","title":"Attributes","text":"Attribute Type Description <code>args</code> <code>[string]?</code> The arguments to the binary. <code>cmd</code> <code>string</code> The command to execute, split by shellquote. <code>dir</code> <code>string?</code> The directory where the command is run. Defaults to the ${root} directory. <code>env</code> <code>[string]?</code> The environment variables for the execution. <code>stdin</code> <code>string?</code> Optional string to be used as the stdin for the command."},{"location":"packaging/schema/symlink/","title":"on &gt; symlink","text":"<p>Create a symbolic link.</p> <p>Used by: on</p>"},{"location":"packaging/schema/symlink/#attributes","title":"Attributes","text":"Attribute Type Description <code>from</code> <code>string</code> The absolute source file to symlink from. <code>to</code> <code>string</code> The absolute destination to symlink to."},{"location":"packaging/schema/version/","title":"version &lt;version&gt;","text":"<p>Definition of and configuration for a specific version.</p> <p>Used by: &lt;manifest&gt;</p>"},{"location":"packaging/schema/version/#blocks","title":"Blocks","text":"Block Description <code>auto-version { \u2026 }</code> Automatically update versions. <code>darwin { \u2026 }</code> Darwin-specific configuration. <code>linux { \u2026 }</code> Linux-specific configuration. <code>on &lt;event&gt; { \u2026 }</code> Triggers to run on lifecycle events. <code>platform &lt;attr&gt; { \u2026 }</code> Platform-specific configuration. &lt;attr&gt; is a set regexes that must all match against one of CPU, OS, etc.."},{"location":"packaging/schema/version/#attributes","title":"Attributes","text":"Attribute Type Description <code>apps</code> <code>[string]?</code> Relative paths to Mac .app packages to install. <code>arch</code> <code>string?</code> CPU architecture to match (amd64, 386, arm, etc.). <code>binaries</code> <code>[string]?</code> Relative glob from $root to individual terminal binaries. <code>dest</code> <code>string?</code> Override archive extraction destination for package. <code>dont-extract</code> <code>boolean?</code> Don't extract the package source, just copy it into the installation directory. <code>env</code> <code>{string: string}?</code> Environment variables to export. <code>files</code> <code>{string: string}?</code> Files to load strings from to be used in the manifest. <code>mirrors</code> <code>[string]?</code> Mirrors to use if the primary source is unavailable. <code>mutable</code> <code>boolean?</code> Package will not be made read-only. <code>provides</code> <code>[string]?</code> This package provides the given virtual packages. <code>rename</code> <code>{string: string}?</code> Rename files after unpacking to ${root}. <code>requires</code> <code>[string]?</code> Packages this one requires. <code>root</code> <code>string?</code> Override root for package. <code>runtime-dependencies</code> <code>[string]?</code> Packages used internally by this package, but not installed to the target environment <code>sha256</code> <code>string?</code> SHA256 of source package for verification. When in conflict with SHA256 in sha256sums, this value takes precedence. <code>sha256-source</code> <code>string?</code> URL for SHA256 checksum file for source package. <code>source</code> <code>string?</code> URL for source package. Valid URLs are Git repositories (using .git[#&lt;tag&gt;] suffix), Local Files (using file:// prefix), and Remote Files (using http:// or https:// prefix) <code>strip</code> <code>number?</code> Number of path prefix elements to strip. <code>test</code> <code>string?</code> Command that will test the package is operational. <code>vars</code> <code>{string: string}?</code> Set local variables used during manifest evaluation."},{"location":"sdks/","title":"Supported SDKs","text":"<p>As of early 2021 Hermit has support for the following language SDKs.</p> SDK Status Crystal Crystal is a general-purpose, object-oriented programming language with a Ruby-inspired syntax. Elm Elm is distributed as a single binary, so everything works as you would expect! Flutter (Dart) Flutter is available, though not well tested. GraalVM GraalVM is supported and reasonably well tested. Go Hermitised Go is isolated, though uses the global Go cache (<code>~/go</code>) for performance/utilisation considerations. <code>${GOBIN}</code> is set to <code>${HERMIT_ENV}/.hermit/go/bin</code> and is included in the <code>${PATH}</code>. Haskell (GHC) GHC and Cabal are both available though not well tested. Java Java (OpenJDK) is supported and well tested, including Zulu builds. Kotlin Kotlin is supported and well tested. Node Packages are completely isolated within the Hermit environment. Global packages (<code>npm install -g</code>) are installed into <code>${HERMIT_ENV}/.hermit/node</code> while local packages are installed in <code>${HERMIT_ENV}/node_modules</code>. <code>bin</code> directories for both global and local packages are added to the <code>${PATH}</code>. Python Python is fully supported and isolated. Python packages installed within an active Hermit environment will be located in <code>${HERMIT_ENV}/.hermit/python</code> and <code>${HERMIT_ENV}/.hermit/python/bin</code> is added to the <code>${PATH}</code>. Rust Rust stable and nightly are both supported along with all standard tooling. Nightly will be updated daily. TinyGo A Go Compiler For Small Places. Zig Zig is supported and works as expected, though not well tested."},{"location":"usage/","title":"Usage","text":"<p>This documentation describes how to use Hermit within your own projects.</p>"},{"location":"usage/bundle/","title":"Bundling","text":"<p>A bundle is a completely self-contained directory of packages and associated environment variables generated from an existing Hermit environment. It has no dependency on Hermit. It can be useful for ensuring production packages used in Docker containers are identical to the packages used in development, for example.</p>"},{"location":"usage/bundle/#example","title":"Example","text":"<p>Create a new environment and bundle from it:</p> <pre><code>$ hermit init .\n$ hermit install go\n$ hermit bundle ../dist\ninfo: Created exploded bundle:\ninfo:   Root: /Users/aat/dev/dist\ninfo:    Bin: /Users/aat/dev/dist/bin\ninfo:   .env: /Users/aat/dev/dist/.env\ninfo:         GOROOT=\"${PWD}/go-1.24.5\"\ninfo:         GOTOOLCHAIN=\"local\"\ninfo:         PATH=\"${PWD}/.hermit/go/bin:${PWD}/bin:$PATH\"\ninfo:         GOBIN=\"${PWD}/.hermit/go/bin\"\n</code></pre> <p>The layout of the bundle will look something like this:</p> <pre><code>$ cd ../dist\n$ ls -l bin\ntotal 0\nlrwxr-xr-x  1 aat  staff  19 27 Aug 19:36 go@ -&gt; ../go-1.24.5/bin/go\nlrwxr-xr-x  1 aat  staff  22 27 Aug 19:36 gofmt@ -&gt; ../go-1.24.5/bin/gofmt\n$ cat .env\nGOROOT=\"${PWD}/go-1.24.5\"\nGOTOOLCHAIN=\"local\"\nPATH=\"${PWD}/.hermit/go/bin:${PWD}/bin:$PATH\"\nGOBIN=\"${PWD}/.hermit/go/bin\"\n</code></pre> <p>You can then \u201cactivate\u201d the bundle by sourcing the <code>.env</code> file:</p> <pre><code>$ . .env\n$ echo $GOROOT\n/Users/aat/dev/dist/go-1.24.5\n</code></pre>"},{"location":"usage/ci/","title":"Continuous Integration","text":"<p>Generally, using Hermit in CI is similar to using it locally - activate your environment via <code>. ./bin/activate-hermit</code>, add <code>&lt;repo&gt;/bin</code> to your <code>$PATH</code>, or use <code>./bin/hermit env</code> to directly update your CI environment.</p>"},{"location":"usage/ci/#github-actions","title":"GitHub Actions","text":"<p>Using Hermit in GitHub Actions is straightforward. Just add the following step to each job:</p> <pre><code>      - name: Init Hermit\n        uses: cashapp/activate-hermit@v1\n</code></pre> <p>eg.</p> <pre><code>on:\n  push:\n    branches:\n      - master\n  pull_request:\nname: CI\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Init Hermit\n        uses: cashapp/activate-hermit@v1\n      - name: Test\n        run: go test ./...\n</code></pre>"},{"location":"usage/ci/#jenkins","title":"Jenkins","text":"<p>Here\u2019s an example <code>Jenkinsfile</code> to use Hermit inside Jenkins:</p> <pre><code>pipeline {\n  agent any\n\n  stages {\n    stage('Do stuff') {\n      environment {\n        hermitEnvVars = sh(returnStdout: true, script: './bin/hermit env --raw').trim()\n      }\n\n      steps {\n        withEnv(hermitEnvVars.split('\\n').toList()) {\n          // now we can use any hermit package directly...\n          sh 'go build'\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"usage/config/","title":"Configuration","text":"<p>Each Hermit environment contains a <code>bin/hermit.hcl</code> file that can be used to customise that Hermit environment.</p> <pre><code>// Extra environment variables to be added to the Hermit environment.\n//\n// Other variables can be expanded, allowing you to prepend/append to\n// existing variables, eg. \"$PATH:${HERMIT_ENV}/scripts\". To prevent\n// undesired expansion, escape using $$, eg. \"TEMPLATE\": \"foo-$${bar}\".\n//\n// These values are managed by the `hermit env` command.\nenv = {\n  \"ENVAR\": \"VALUE\",\n}\n\n// Hermit supports three different manifest sources:\n//\n// 1. Git repositories; any cloneable URI ending with `.git`.\n//    eg. `https://github.com/cashapp/hermit-packages.git`.\n//    An optional `#&lt;tag&gt;` suffix can be added to checkout a specific tag.\n// 2. Local filesystem, eg. `file:///home/user/my-packages`.\n//    This is mostly only useful for local development and testing.\n// 3. Environment relative, eg. `env:///my-packages`.\n//    This will search for package manifests in the directory `${HERMIT_ENV}/my-packages`.\n//    Useful for local overrides.\nsources = [\"SOURCE\"]\n\n// Whether Hermit should automatically add/remove files from Git.\nmanage-git = false\n\n// Whether this Hermit environment should inherit an environment from a parent directory.\ninherit-parent = false\n\n// Configures when to use GitHub token authentication from $GITHUB_TOKEN.\ngithub-token-auth {\n  // A list of globs to match against GitHub repositories.\n  match = [\"ORG/REPO\", \"ORG/*\"]\n}\n</code></pre>"},{"location":"usage/config/#attributes","title":"Attributes","text":"Attribute Type Description <code>env</code> <code>{string:string}?</code> Extra environment variables. <code>sources</code> <code>[string]?</code> Package manifest sources in order of preference. <code>manage-git</code> <code>bool?</code> Whether Hermit should manage Git. <code>inherit-parent</code> <code>bool?</code> Whether this Hermit environment should inherit an environment from a parent directory. <code>github-token-auth</code> <code>GitHubTokenAuthConfig?</code> When to use GitHub token authentication. <code>idea</code> <code>bool?</code> Whether Hermit should automatically add the IntelliJ IDEA plugin."},{"location":"usage/config/#githubtokenauthconfig","title":"GitHubTokenAuthConfig","text":"Attribute Type Description match <code>[string]?</code> One or more glob patterns. If any of these match the \u2018owner/repo\u2019 pair of a GitHub repository, the GitHub token from the current environment will be used to fetch their artifacts."},{"location":"usage/config/#per-environment-sources","title":"Per-environment Sources","text":"<p>Hermit supports three different manifest sources:</p> <ol> <li>Git repositories; any cloneable URI ending with <code>.git</code>, eg. <code>https://github.com/cashapp/hermit-packages.git</code>. An optional <code>#&lt;tag&gt;</code> suffix can be added to checkout a specific tag.</li> <li>Local filesystem, eg. <code>file:///home/user/my-packages</code>. This is mostly only useful for local development and testing.</li> <li>Environment relative, eg. <code>env:///my-packages</code>. This will search for package manifests in the directory <code>${HERMIT_ENV}/my-packages</code>. Useful for local overrides.</li> </ol>"},{"location":"usage/envars/","title":"Environment variables","text":"<p>When a Hermit environment is active, environment variables will be set by Hermit itself, the command-line, the active environment, and installed packages, in that order.</p>"},{"location":"usage/envars/#hermit","title":"Hermit","text":"<p>Hermit prefixes all of its own variables with <code>HERMIT_</code> or <code>_HERMIT_</code>. While it uses a bunch of variables internally, two you can rely on to always be present in an active environment are:</p> Name Description <code>HERMIT_ENV</code> Path to the active Hermit environment. <code>HERMIT_BIN</code> Path to the active Hermit environment <code>bin</code> directory. <p>An empty environment might look something like the following:</p> <pre><code>project\ud83d\udc1a~/project$ hermit env\nHERMIT_BIN=/home/user/project/bin\nHERMIT_ENV=/home/user/project\nPATH=/home/user/project/bin:/home/user/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/local/bin\n</code></pre>"},{"location":"usage/envars/#command-line","title":"Command-line","text":"<p>Use the flag <code>--env=NAME=value</code> to set per-invocation environment variables.</p>"},{"location":"usage/envars/#active-environment","title":"Active Environment","text":"<p>The active environment may define additional environment variables in <code>bin/hermit.hcl</code>. These can be managed with the <code>hermit env</code> command, or by directly editing the configuration file.</p> <p>For example, to set <code>GOBIN</code> to a <code>build</code> directory within the environment:</p> <pre><code>project\ud83d\udc1a~/project$ hermit env GOBIN '${HERMIT_ENV}/build'\nproject\ud83d\udc1a~/project$ hermit env       \nGOBIN=/home/user/project/build\nGOROOT=/home/user/.cache/hermit/pkg/go-1.16\n...\nproject\ud83d\udc1a~/project$ echo $GOBIN\n/home/user/project/build\n</code></pre> <p>The <code>bin/hermit.hcl</code> file will contain:</p> <pre><code># Extra environment variables.\nenv = {\n  \"GOBIN\": \"${HERMIT_ENV}/build\",\n}\n</code></pre> <p>Use the <code>hermit env</code> command to view and set per-environment variables:</p> <pre><code>Usage: hermit env [&lt;name&gt;] [&lt;value&gt;]\n\nManage environment variables.\n\nWithout arguments the \"env\" command will display environment variables for the\nactive Hermit environment.\n\nPassing \"&lt;name&gt;\" will print the value for that environment variable.\n\nPassing \"&lt;name&gt; &lt;value&gt;\" will set the value for an environment variable in the\nactive Hermit environment.\"\n\nArguments:\n  [&lt;name&gt;]     Name of the environment variable.\n  [&lt;value&gt;]    Value to set the variable to.\n\nFlags:\n  -r, --raw           Output raw values without shell quoting.\n      --activate      Prints the commands needed to set the environment to the\n                      activated state\n      --deactivate    Prints the commands needed to reset the environment to the\n                      deactivated state\n  -i, --inherit       Inherit variables from parent environment.\n  -n, --names         Show only names.\n  -u, --unset         Unset the specified environment variable.\n</code></pre> <p>Warning</p> <p>Take care to only use single quotes (<code>'</code>) when setting values so that the shell   doesn\u2019t interpolate environment variables before Hermit. ie. Do not do this:</p> <pre><code>  project\ud83d\udc1a~/project$ hermit env GOBIN \"${HERMIT_ENV}/build\"\n</code></pre> <p>as it will result in this <code>bin/hermit.hcl</code>:</p> <pre><code># Extra environment variables.\nenv = {\n  \"GOBIN\": \"/home/user/project/build\",\n}\n</code></pre> <p>This will of course work fine for the local user, but will fail tragically for anyone else.</p>"},{"location":"usage/envars/#installed-packages","title":"Installed Packages","text":"<p>Packages may export environment variables for convenience or in order to operate correctly. For example, the <code>go</code> package sets the <code>GOROOT</code> to the location of the installed Go SDK:</p> <pre><code>project\ud83d\udc1a~/project$ hermit install go\nproject\ud83d\udc1a~/project$ hermit env\nGOROOT=/home/user/.cache/hermit/pkg/go-1.16\n...\n</code></pre>"},{"location":"usage/get-started/","title":"Get Started","text":"<p>This document gives a brief introduction to installing Hermit and using a newly created environment.</p>"},{"location":"usage/get-started/#installing-hermit","title":"Installing Hermit","text":"<p>Installing Hermit is straightforward:</p> <pre><code>curl -fsSL https://github.com/cashapp/hermit/releases/download/stable/install.sh | /bin/bash\n</code></pre> <p>This will download and install <code>hermit</code> into <code>~/bin</code>. You should add this to your <code>$PATH</code> if it isn\u2019t already.</p> <p>Note</p> <p>Also consider installing the shell hooks to get automatic environment activation/deactivation when changing directories.</p>"},{"location":"usage/get-started/#initialising-a-project","title":"Initialising a Project","text":"<p>Change into a project directory and run the following:</p> <pre><code>~$ cd ~/project\n~/project$ hermit init\ninfo: Creating new Hermit environment in /home/user/project\n...\n</code></pre> <p>At this point the Hermit environment should be initialised and the <code>./bin</code> directory should contain something like the following:</p> <pre><code>README.hermit.md\nactivate-hermit\nhermit\nhermit.hcl\n</code></pre>"},{"location":"usage/get-started/#activating-an-environment","title":"Activating an Environment","text":"<p>Activating an environment will add its <code>bin</code> directory to your <code>$PATH</code>, as well as setting any environment variables managed by Hermit.</p> <p>To activate a Hermit environment source the <code>activate-hermit</code> script:</p> <pre><code>~/project$ . ./bin/activate-hermit\nHermit environment /home/user/project activated\nproject\ud83d\udc1a~/project$\n</code></pre> <p>Once activated the shell prompt will change to include the prefix <code>&lt;environment&gt;\ud83d\udc1a</code>.</p> <p>At this point you can use and manage packages in this environment.</p>"},{"location":"usage/get-started/#searching-for-packages","title":"Searching for packages","text":"<p>Once your environment is activated, use <code>hermit search</code> to search for packages. Without arguments it will list all known packages, or you may pass a term to search in package names and descriptions.</p> <pre><code>project\ud83d\udc1a~/project$ hermit search openjdk\nopenjdk (11.0.11_9-zulu11.48.21, @stable, @zulu, 11.0.8_10, 11.0.9_11, 11.0.10_9)\n  Java is a class-based, object-oriented programming language.\n</code></pre>"},{"location":"usage/get-started/#installing-a-package","title":"Installing a package","text":"<p>After you\u2019ve selected the package you\u2019d like to install into your environment, use <code>hermit install</code> to install packages:</p> <pre><code>project\ud83d\udc1a~/project$ hermit install go-1.16.3\nproject\ud83d\udc1a~/project$ go version\ngo version go1.16.3 darwin/amd64\n</code></pre> <p>Refer to the package management documentation for more details, including how to uninstall, information about channels, etc.</p>"},{"location":"usage/get-started/#deactivating-an-environment","title":"Deactivating an Environment","text":"<p>When an environment is activated, Hermit inserts a shell function <code>deactivate-hermit</code>. Call this to deactivate the current environment.</p> <pre><code>project\ud83d\udc1a~/project$ deactivate-hermit\nHermit environment /home/user/project deactivated\n~/project$\n</code></pre>"},{"location":"usage/ide/","title":"Editor / IDE Integration","text":""},{"location":"usage/ide/#jetbrains-intellij-goland","title":"JetBrains - IntelliJ, GoLand","text":"<p>Warning</p> <p>Due to the way JetBrains IDE plugin APIs are designed, specific support for each language has to be built into the plugin. Currently, only the JDK and Go are supported.</p> <p>To install the plugin, search for the \u201cHermit\u201d plugin from the Plugin Marketplace in the IDE <code>Preferences &gt; Plugin</code> view, and install it.</p> <p>When you open a Hermit managed project, a dialog is shown asking if you want to enable the plugin for the project. If you select \u201cyes\u201d, the plugin is configured for your project.</p> <p>The plugin will automatically configure Go and Java SDKs to work with the IDE, including Run Configurations, tests, and the builtin terminal.</p>"},{"location":"usage/ide/#terminal-based-editors","title":"Terminal-based Editors","text":"<p>Terminal based editors should Just Work\u2122\ufe0f if launched after a Hermit environment is activated.</p>"},{"location":"usage/ide/#mac-gui-editors-workaround","title":"Mac GUI Editors (Workaround)","text":"<p>For other editors and IDEs, the best solution in lieu of native plugins is to open up a terminal, activate the Hermit environment, then launch the editor from the terminal. This is not ideal, but does work until a plugin is available.</p> <ol> <li>Close your editor.</li> <li>From a terminal activate your Hermit environment: <code>. ./bin/activate-hermit</code></li> <li> <p>Launch your editor from the terminal:</p> Editor Launch command Sublime <code>subl -nd .</code> Visual Studio Code <code>code .</code> </li> </ol> <p>At this point your editor should be running with environment variables from the Hermit environment.</p>"},{"location":"usage/ide/#visual-studio-code-terminal","title":"Visual Studio Code terminal","text":"<p>When using Hermit with the VS Code terminal, note that VS Code may alter the <code>PATH</code> environment variable. This can lead to conflicts with system binaries.</p> <p>To ensure Hermit re-activation in VS Code terminal, adjust the VS Code settings as follows:</p> <pre><code>{\n    \"settings\": {\n        \"terminal.integrated.env.osx\": {\n            \"ACTIVE_HERMIT\": null,\n            \"HERMIT_ENV\": null,\n            \"HERMIT_ENV_OPS\": null,\n            \"HERMIT_BIN\": null\n        },\n    }\n}\n</code></pre>"},{"location":"usage/ide/#other","title":"Other","text":"<p>Some IDEs/editors have support for configuring environment variables explicitly. In this case you can use <code>hermit env</code> to dump a machine-readable list of the environment variables Hermit manages. This can then be configured in your IDE.</p> <p>Warning</p> <p>Note that if you add/remove packages from your Hermit environment you will need to reconfigure your IDE to pick up any changes to environment variable.</p>"},{"location":"usage/management/","title":"Package management","text":"<p>This document describes how packages within a Hermit environment can be found, installed, and managed. Packages are defined in configuration files called manifests which are retrieved from collections of manifests called manifest sources which in turn are commonly (but not always) Git repositories.</p>"},{"location":"usage/management/#keeping-up-to-date","title":"Keeping up to Date","text":"<p>Hermit retrieves package manifests from various locations, including Git repositories. It will periodically sync these repositories to your system to ensure you have the most up to date manifests. Similarly, Hermit will periodically update itself and packages installed by channel. You can force this by running:</p> <pre><code>project\ud83d\udc1a~/project$ hermit update\n</code></pre>"},{"location":"usage/management/#searching-for-packages","title":"Searching for Packages","text":"<p>Search for packages with the <code>search</code> command, optionally passing a substring to match within the package name or description:</p> <pre><code>project\ud83d\udc1a~/project$ hermit search rust\nrust (@nightly, 1.51.0)\n  A language empowering everyone to build reliable and efficient software.\n</code></pre>"},{"location":"usage/management/#selecting-packages","title":"Selecting Packages","text":"<p>Packages can be selected in one of three ways:</p> <ol> <li> <p>By version - <code>&lt;package&gt;-&lt;version&gt;</code></p> <p>A specific version of a package can be installed by specifying <code>&lt;package&gt;-&lt;version&gt;</code>. eg. <code>hermit install rustc-1.51.0</code></p> </li> <li> <p>By channel - <code>&lt;package&gt;@&lt;channel&gt;</code></p> <p>Channels can be explicitly selected with <code>&lt;package&gt;@&lt;channel&gt;</code>, eg. <code>hermit install rustc@nightly</code>. Channels are automatically updated at a frequency defined by the package manifest.</p> </li> <li> <p>By preferred version - <code>&lt;package&gt;</code></p> <p>When specifying just a package name, ie. <code>&lt;package&gt;</code>, the preferred version will be installed. The preferred version is, in order of priority:</p> <ol> <li>The version specified as the <code>default</code> in the manifest.</li> <li>The latest stable version.</li> <li>The latest unstable version.</li> <li>The last channel, alphabetically.</li> </ol> </li> </ol>"},{"location":"usage/management/#installing-packages","title":"Installing Packages","text":"<p>To install the latest stable version of <code>protoc</code> and the <code>nightly</code> channel of <code>rust</code>:</p> <pre><code>project\ud83d\udc1a~/project$ hermit install rust@nightly protoc\n</code></pre> <p>At this point if you <code>ls bin</code> you will see something like the following:</p> <pre><code>project\ud83d\udc1a~/project$ ls bin\nREADME.hermit.md  clippy-driver@    rust-analyzer@    rustc@\nactivate-hermit*  hermit*           rust-demangler@   rustdoc@\ncargo@            hermit.hcl        rust-gdb@\ncargo-clippy@     miri@             rust-gdbgui@\ncargo-miri@       protoc@           rust-lldb@\n</code></pre>"},{"location":"usage/management/#list-installed-packages","title":"List Installed Packages","text":"<p>To list packages installed in the active environment:</p> <pre><code>project\ud83d\udc1a~/project$ hermit list\nprotoc (3.14.0)\n  protoc is a compiler for protocol buffers definitions files.\nrust (@nightly)\n  A language empowering everyone to build reliable and efficient software.\n</code></pre>"},{"location":"usage/management/#package-information","title":"Package Information","text":"<p>You can obtain more detailed package information with <code>hermit info &lt;package&gt;</code>, eg.</p> <pre><code>project\ud83d\udc1a~/project$ hermit info rust\nhermit info rust@nightly\nName: rust\nChannel: nightly\nDescription: A language empowering everyone to build reliable and efficient software.\nState: installed\nLast used: 3m36.889138s ago\nSource: https://static.rust-lang.org/dist/rust-nightly-x86_64-apple-darwin.tar.xz\nRoot: /home/user/.cache/hermit/pkg/rust@nightly\nBinaries: cargo cargo-clippy clippy-driver cargo-miri miri rust-analyzer rust-demangler rust-gdb rust-gdbgui rust-lldb rustc rustdoc\n</code></pre>"},{"location":"usage/management/#upgrading-packages","title":"Upgrading Packages","text":"<p>For package channels or versions that adhere to semantic versioning, Hermit will automatically upgrade to the latest minor version using the <code>hermit upgrade</code> command:</p> <pre><code>project\ud83d\udc1a~/project$ hermit upgrade rust\nproject\ud83d\udc1a~/project$ rustc --version\nrustc 1.51.0 (2fd73fabe 2021-03-23)\n</code></pre>"},{"location":"usage/management/#downgrading-changing-versions","title":"Downgrading / Changing Versions","text":"<p>To downgrade or switch to a specific version, use <code>hermit install</code> to explicitly specify the version. eg.</p> <pre><code>project\ud83d\udc1a~/project$ hermit install rust-1.50.0\nproject\ud83d\udc1a~/project$ rustc --version\nrustc 1.50.0 (940f2a77 2021-01-02)\n</code></pre>"},{"location":"usage/management/#uninstalling-packages","title":"Uninstalling Packages","text":"<p>Use <code>hermit uninstall</code>:</p> <pre><code>project\ud83d\udc1a~/project$ hermit uninstall rust\n</code></pre>"},{"location":"usage/recipes/","title":"Recipes / Patterns","text":"<p>Patterns for solving common problems.</p>"},{"location":"usage/recipes/#pin-to-a-major-or-minor-version","title":"Pin to a major or minor version","text":"<p>Each Hermit package includes a <code>@latest</code> channel, which is the latest stable version. One downside to this is that if a new major version is released, potentially including breaking changes, Hermit will use that as the version.</p> <p>To solve this problem Hermit also creates channels for each <code>(major)</code> and <code>(major, minor)</code> version tuple. For example:</p> <pre><code>$ hermit search -s '^go$' | grep 'go@[0-9]'\ngo@1\ngo@1.13\ngo@1.14\ngo@1.15\ngo@1.16\ngo@1.17\n</code></pre> <p>In Go\u2019s case, a minor (1.17 -&gt; 1.18) version bump can be a bit rocky, so we might want to pin to the current stable minor version:</p> <pre><code>$ hermit install go@1.17\n</code></pre> <p>This will track the latest point release of Go 1.17.</p>"},{"location":"usage/recipes/#reusing-shell-scripts-across-multiple-projects","title":"Reusing shell scripts across multiple projects","text":"<p>In large multi-repo environments, it\u2019s common to have sets of shell scripts that are shared across projects. Anything from setting up and pushing Docker images to ECR, to linting in a consistent way, to validating <code>.proto</code> files, and so on.</p> <p>One solution to this is to have a git repository containing the scripts, cloned down by each project. The main issue here is versioning. Either the mainline branch is used, which exposes users directly to bugs, or a specific tagged version is be used, which relies on consumers updating those tags as the scripts are updated.</p> <p>Hermit can solve this problem nicely with its support for git cloned packages:</p> <pre><code>description = \"Our common scripts\"\nbinaries = [\"*.sh\"]\n\nsource = \"https://github.com/my-org/common-scripts.git#v${version}\"\nversion \"0.1.0\", \"0.1.1\", \"0.2.0\" {}\n\nchannel tip {\n    update = \"1h\"\n    source = \"https://github.com/my-org/common-scripts.git\"\n}\n</code></pre> <p>This provides semantic versioning for our library of scripts. Consumers can pin to a major or minor version to get stability, but test repositories can opt in to the \u201ctip\u201d channel to get the bleeding edge.</p>"},{"location":"usage/recipes/#shell-script-libraries","title":"Shell script \u201clibraries\u201d","text":"<p>With a bit of creativity, Hermit can help share libraries of scripts to be used by other scripts. Add a <code>my-script-lib-prefix</code> to your library to report its install directory. This is somewhat akin to <code>pkg-config</code>.</p> <pre><code>#!/bin/bash\necho \"$(dirname $0)\"\n</code></pre> <p>Then expose this as a binary in the Hermit package:</p> <pre><code>description = \"My script lib\"\nbinaries = [\"my-script-lib-prefix\"]\n\nsource = \"https://github.com/my-org/my-script-lib.git#v${version}\"\nversion \"0.1.0\", \"0.1.1\", \"0.2.0\" {}\n</code></pre> <p>Then to source any of the \u201clibrary\u201d scripts just install the package and:</p> <pre><code>#!/bin/bash\n\n. $(my-script-lib-prefix)/lib1.sh\n\n# Use definitions from lib1.sh`\n</code></pre>"},{"location":"usage/renovate/","title":"Renovate","text":"<p>Renovate is an open source dependency update tools. It supports the followings:</p> <ul> <li>Update Hermit Packages</li> <li>Using Hermit as a source of Binaries</li> </ul>"},{"location":"usage/renovate/#update-hermit-packages","title":"Update Hermit Packages","text":"<p>Package update with Renovate ensures updates are done explicitly to the code repository via code commits. Together with proper default branch protection setup &amp; CI pipeline steps, it can prevent breaking hermit package update flows into the repository, which is always a problem in the implicit package update using Channel.</p>"},{"location":"usage/renovate/#enable-hermit-manager","title":"Enable Hermit Manager","text":"<p>To start using Renovate for Hermit package updates, you will need to add <code>hermit</code> to the <code>enabledManagers</code> option in the Renovate repository config.</p> <pre><code>{\n  enabledManagers: [\"hermit\"]\n}\n</code></pre>"},{"location":"usage/renovate/#private-packags","title":"Private Packags","text":"<p>If you are using Private Packages, You will need to configure the followings:</p> <ul> <li>Datasource Registry Url to make Hermit in Renovate to use the correct sources of packages.</li> <li>Github Token for Hermit to make sure Hermit has proper access when downloading packages.</li> </ul>"},{"location":"usage/renovate/#hermit-as-binary-source","title":"Hermit as Binary Source","text":"<p>Renovate provides different ways to specify the source of binaries of the package managers, which satisfies different needs across the Renovate community. </p> <p>With the ability to specify <code>hermit</code> as a binary source for Renovate, an extra level of flexibility is provided to Renovate. The benefits are listed as follows:</p> <ul> <li>Use exact version of package manager in a repository. (as opposite to the Go binary version)</li> <li>Allows different package manager versions across all repositories managed by the given Renovate instance</li> <li>Supports package managers outside the listing for <code>binarySource=install</code></li> </ul> <p>Note: This feature only supports Self-hosting Renovate environment where user have control over the <code>binarySource</code> attribute.</p>"},{"location":"usage/shell/","title":"Shell Integration","text":""},{"location":"usage/shell/#tracking-environment-variables","title":"Tracking Environment Variables","text":"<p>When a Hermit environment is activated, Hermit will install a shell hook to keep your shell\u2019s environment variables synchronized with Hermit\u2019s environment variables as you add and remove packages. This hook executes prior to each command.</p>"},{"location":"usage/shell/#shell-hooks","title":"Shell Hooks","text":"<p>Hermit can also install shell integration hooks to provide  * Automatic environment activation / deactivation of Hermit environments as you change directories in    your terminal.  * Shell completion for the Hermit commands and packages</p>"},{"location":"usage/shell/#zsh","title":"Zsh","text":"<p>This will install Hermit hooks into your <code>~/.zshrc</code> file. Restart your shell in order for the changes to take effect.</p> <pre><code>hermit shell-hooks --zsh\n</code></pre> <p>To enable the ZSH command completion, you also need to manually initialise the completion system. A simple example on how to do this is to add this to your <code>~/.zshrc</code> file, before the Hermit hooks: <pre><code>autoload -U compinit &amp;&amp; compinit -i\n</code></pre> See the ZSH Documentation for more information</p>"},{"location":"usage/shell/#bash","title":"Bash","text":"<p>This will install Hermit hooks into your <code>~/.bashrc</code> file. Restart your shell in order for the changes to take effect.</p> <pre><code>hermit shell-hooks --bash\n</code></pre>"},{"location":"usage/shell/#fish","title":"Fish","text":"<p>This will install Hermit hooks into <code>~/.config/fish/conf.d/hermit.fish</code>. Restart your shell in order for the changes to take effect.</p> <pre><code>hermit shell-hooks --fish\n</code></pre>"},{"location":"usage/updates/","title":"Updating","text":"<p>Hermit is designed in such a way that it and its package manifests are always on the latest version. To that end, Hermit will check for and upgrade to new releases of itself once every 24 hours, and will sync to the latest package definitions every 24 hours. If you notice a pause when using Hermit, this is often the cause.</p> <p>You can read more about the implications of this on package maintenance in the packaging introduction.</p> <p>In addition, some packages may define channels which allow packages to be kept up to date automatically with upstream releases. Channels specify their own update frequency which Hermit will use to periodically check for updates. If the ETag for the package has changed, Hermit will download and upgrade the package.</p>"},{"location":"usage/user-config/","title":"User Configuration","text":"<p>User\u2019s can override certain global behaviours of Hermit by creating a <code>~/.hermit.hcl</code> file adhering to the following schema:</p> user-config-schema.hcl<pre><code># Modify prompt to include hermit environment (env), just an icon (short) or nothing (none)\n# enum: env,short,none\n# default: env\nprompt = string # (optional)\n# If true use a short prompt when an environment is activated.\nshort-prompt = boolean # (optional)\n# If true Hermit will never add/remove files from Git automatically.\nno-git = boolean # (optional)\n# If true Hermit will try to add the IntelliJ IDEA plugin automatically.\nidea = boolean # (optional)\n\n# Default configuration values for new Hermit environments.\ndefaults {\n  # Extra environment variables.\n  env = {\n    string: string,\n  } # (optional)\n  # Package manifest sources.\n  sources = [string] # (optional)\n  # Whether Hermit should automatically 'git add' new packages.\n  # default: true\n  manage-git = boolean # (optional)\n  # Whether this environment inherits a potential parent environment from one of the parent directories\n  # default: false\n  inherit-parent = boolean # (optional)\n  # Whether Hermit should automatically add the IntelliJ IDEA plugin.\n  # default: false\n  idea = boolean # (optional)\n\n  # When to use GitHub token authentication.\n  github-token-auth {\n    # One or more glob patterns. If any of these match the 'owner/repo' pair of a GitHub repository, the GitHub token from the current environment will be used to fetch their artifacts.\n    match = [string] # (optional)\n  }\n}\n</code></pre>"}]}